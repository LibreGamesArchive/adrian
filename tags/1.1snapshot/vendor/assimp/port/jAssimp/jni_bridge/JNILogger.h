/*
Open Asset Import Library (ASSIMP)
----------------------------------------------------------------------

Copyright (c) 2006-2008, ASSIMP Development Team
All rights reserved.

Redistribution and use of this software in source and binary forms, 
with or without modification, are permitted provided that the 
following conditions are met:

* Redistributions of source code must retain the above
  copyright notice, this list of conditions and the
  following disclaimer.

* Redistributions in binary form must reproduce the above
  copyright notice, this list of conditions and the
  following disclaimer in the documentation and/or other
  materials provided with the distribution.

* Neither the name of the ASSIMP team, nor the names of its
  contributors may be used to endorse or promote products
  derived from this software without specific prior
  written permission of the ASSIMP Development Team.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

----------------------------------------------------------------------
*/

#if (!defined AI_JNILOGGER_H_INCLUDED)
#define AI_JNILOGGER_H_INCLUDED


#include "../../../include/Logger.h"
#include "../../../include/DefaultLogger.h"
#include <vector>

#include <jni.h>

namespace Assimp	{
namespace JNIBridge		{

// ---------------------------------------------------------------------------
class IOStream;
struct LogStreamInfo;


// ---------------------------------------------------------------------------
/**	@class	JNILogDispatcher
 *	@brief	Logging system implementation that is used to send all
 *  log messages generated by native code to the Java logging system.
 */
class JNILogDispatcher : public Logger 
{
	friend class JNIEnvironment;

public:

	//! Default constructor
	JNILogDispatcher() : m_iRefCnt(1) {}

	/**	@brief	Logs a debug message */
	void debug(const std::string &message);

	/**	@brief	Logs an info message */
	void info(const std::string &message);

	/**	@brief	Logs a warning message */
	void warn(const std::string &message);
	
	/**	@brief	Logs an error message */
	void error(const std::string &message);

	/** @brief Log severity setter */
	void setLogSeverity(LogSeverity log_severity) {}

	/**	@brief	Detach a still attached stream from logger */
	void attachStream(LogStream *pStream, unsigned int severity) {} 

	/**	@brief	Detach a still attached stream from logger */
	void detatchStream(LogStream *pStream, unsigned int severity) {}

	//! COM-style reference counting mechanism
	unsigned int AddRef()
	{
		return ++this->m_iRefCnt;
	}

	//! COM-style reference counting mechanism
	unsigned int Release()
	{
		unsigned int iNew = --this->m_iRefCnt;
		if (0 == iNew)
		{
			delete this;
			// don't forget to reset the logger to the default implementation
			DefaultLogger::set(NULL);
		}
		return iNew;
	}

private:

	//! Called by JNIEnvironment
	bool OnAttachToCurrentThread(JNIThreadData* pcData);
	bool OnDetachFromCurrentThread(JNIThreadData* pcData);

private:

	//! Handle to assimp.DefaultLogger class
	jclass m_pcClass;

	//! Handle to the static assimp.DefaultLogger._NativeCallWriteError() method
	jmethodID m_pcMethodError;

	//! Handle to the static assimp.DefaultLogger._NativeCallWriteInfo() method
	jmethodID m_pcMethodInfo;

	//! Handle to the static assimp.DefaultLogger._NativeCallWriteDebug() method
	jmethodID m_pcMethodDebug;

	//! Handle to the static assimp.DefaultLogger._NativeCallWriteWarn() method
	jmethodID m_pcMethodWarn;

	//! Reference counter of the logger
	unsigned int m_iRefCnt;
};

};};

#endif // AI_JNILOGGER_H_INCLUDED